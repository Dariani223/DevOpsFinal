
services:
  # Frontend Service
  frontend:
    build: 
      context: ./frontend
      dockerfile: Dockerfile
    ports:
      - "3000:80"
    depends_on:
      - backend
    networks:
      - app-network
    environment:
      - NODE_ENV=production
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/"]
      interval: 30s
      timeout: 10s
      retries: 3
    labels:
      - "com.example.service=frontend"
      - "com.example.version=1.0"

  # Backend Service
  backend:
    build: 
      context: ./backend
      dockerfile: Dockerfile
    ports:
      - "5000:5000"
    networks:
      - app-network
    environment:
      - FLASK_ENV=production
      - FLASK_DEBUG=0
      - FLASK_SECRET_KEY_FILE=/run/secrets/flask_secret
    env_file: 
      - .env
    secrets:
      - flask_secret
      - db_password
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    labels:
      - "com.example.service=backend"
      - "com.example.version=1.0"

  # Prometheus Monitoring
  prometheus:
    image: prom/prometheus:latest
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
      - '--storage.tsdb.retention.time=15d'
      - '--web.enable-lifecycle'
      - '--web.enable-admin-api'
    networks:
      - monitoring-network
      - app-network
    restart: unless-stopped
    labels:
      - "com.example.service=prometheus"
      - "com.example.version=latest"

  # Grafana Visualization
  grafana:
    image: grafana/grafana:latest
    ports:
      - "3001:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana-datasource.yml:/etc/grafana/provisioning/datasources/datasource.yml
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_ADMIN_PASSWORD:-admin123}
      - GF_SECURITY_ALLOW_EMBEDDING=true
      - GF_AUTH_ANONYMOUS_ENABLED=true
      - GF_AUTH_ANONYMOUS_ORG_ROLE=Viewer
    networks:
      - monitoring-network
    restart: unless-stopped
    depends_on:
      - prometheus
    labels:
      - "com.example.service=grafana"
      - "com.example.version=latest"

  # Node Exporter for system metrics
  node-exporter:
    image: prom/node-exporter:latest
    ports:
      - "9100:9100"
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command:
      - '--path.procfs=/host/proc'
      - '--path.sysfs=/host/sys'
      - '--collector.filesystem.ignored-mount-points=^/(sys|proc|dev|host|etc)($$|/)'
    networks:
      - monitoring-network
    restart: unless-stopped
    labels:
      - "com.example.service=node-exporter"
      - "com.example.version=latest"

  # cAdvisor for container metrics
  cadvisor:
    image: gcr.io/cadvisor/cadvisor:latest
    ports:
      - "8080:8080"
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:ro
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro
      - /dev/disk/:/dev/disk:ro
    networks:
      - monitoring-network
    restart: unless-stopped
    privileged: true
    labels:
      - "com.example.service=cadvisor"
      - "com.example.version=latest"

# Networks
networks:
  app-network:
    driver: bridge
    labels:
      - "com.example.network=application"
  monitoring-network:
    driver: bridge
    labels:
      - "com.example.network=monitoring"

# Volumes
volumes:
  prometheus_data:
    driver: local
    labels:
      - "com.example.volume=prometheus"
  grafana_data:
    driver: local
    labels:
      - "com.example.volume=grafana"

# Secrets
secrets:
  flask_secret:
    file: ./secrets/flask_secret.txt
  db_password:
    file: ./secrets/db_password.txt